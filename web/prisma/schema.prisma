// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(cuid())
  githubId       String?  @unique
  githubUsername String?
  email          String?  @unique
  avatarUrl      String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  projects Project[]
  logs     Log[]
}

model Project {
  id             String      @id @default(cuid())
  userId         String
  name           String
  repoUrl        String
  branch         String      @default("main")
  buildStatus    BuildStatus @default(PENDING)
  deployUrl      String? // final CDN endpoint
  subdomain      String      @unique
  lastDeployedAt DateTime?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  user    User     @relation(fields: [userId], references: [id])
  domains Domain[]
  deployments Deployment[]
  logs    Log[]
}

model Deployment {
  id         String      @id @default(cuid())
  projectId  String
  status     BuildStatus @default(PENDING)
  commitHash String?
  url        String?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  project Project @relation(fields: [projectId], references: [id])

  @@index([projectId])
}

model Domain {
  id                String   @id @default(cuid())
  projectId         String
  domain            String   @unique
  verified          Boolean  @default(false)
  verificationToken String? // optional TXT record check
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  project Project @relation(fields: [projectId], references: [id])
}

model Log {
  id        String   @id @default(cuid())
  userId    String?
  projectId String?
  message   String
  createdAt DateTime @default(now())

  user    User?    @relation(fields: [userId], references: [id])
  project Project? @relation(fields: [projectId], references: [id])
}

enum BuildStatus {
  PENDING
  BUILDING
  SUCCESS
  FAILED
}
